certStoreTypes		# 25:$certStoreTypes = @'
pkiInternalsTypes	# 29:$pkiInternalsTypes = @'
gpoType
ApplicationPolicies
ExtendedKeyUsages
OldAuthorityKeyIdentifier
OldPrimaryKeyAttributes
X509version3CertificateExtensionInhibitAny
Get-LabCertificate	# 67:function Get-LabCertificate
cmdletBinding		# 70:    [cmdletBinding(DefaultParameterSetName
DefaultParameterSetName
Parameter
Mandatory
ParameterSetName
SearchString
Parameter
Mandatory
ParameterSetName
Security
Cryptography
X509Certificates
X509FindType
FindType
Security
Cryptography
X509Certificates
CertStoreLocation
Location
Security
Cryptography
X509Certificates
StoreName
Store
ServiceName
Parameter
Mandatory
ParameterSetName
All
Parameter
ParameterSetName
IncludeServices
Password
Parameter
Mandatory
ComputerName
Write-LogFunctionEntry	# 96:    Write-LogFunctionEntry
variables
Name
PSBoundParameters
functions
Name
Get-Certificate2
Sync-Parameter
x
PSBoundParameters
computer
ComputerName
Invoke-LabCommand
ActivityName
ComputerName
ComputerName
ScriptBlock
TypeDefinition
args
ArgumentList
certStoreTypes
NoDisplay
Invoke-LabCommand
ActivityName
ComputerName
ComputerName
ScriptBlock
variables
variables
AsPlainText
Force
Sync-Parameter
Command
Name
Get-Certificate2
Get-Certificate2
ALBoundParameters
Variable
variables
functions
PassThru
Write-LogFunctionExit
Add-LabCertificate	# 122:function Add-LabCertificate
cmdletBinding
DefaultParameterSetName
Parameter
Mandatory
ValueFromPipelineByPropertyName
ParameterSetName
Path
Parameter
Mandatory
ValueFromPipelineByPropertyName
ParameterSetName
Cert
Parameter
Mandatory
ValueFromPipelineByPropertyName
Security
Cryptography
X509Certificates
StoreName
Store
Parameter
Mandatory
ValueFromPipelineByPropertyName
Security
Cryptography
X509Certificates
CertStoreLocation
Location
Parameter
ValueFromPipelineByPropertyName
ServiceName	# 140:        [string]$ServiceName,
Parameter
ValueFromPipelineByPropertyName
ValidateSet
CertificateType
Password
Parameter
Mandatory
ValueFromPipelineByPropertyName
ComputerName
Write-LogFunctionEntry
variables	# 159:        $variables = Get-Variable -Name PSBoundParameters
Name
PSBoundParameters
functions
Name
Add-Certificate2
Sync-Parameter
Invoke-LabCommand
ActivityName
ComputerName
ComputerName
ScriptBlock
TypeDefinition
args
ArgumentList
certStoreTypes
NoDisplay
Invoke-LabCommand
ActivityName
ComputerName
ComputerName
ScriptBlock
tempFile
IO
Path
GetTempFileName
IO
File
WriteAllBytes
tempFile
args
tempFile
ArgumentList
Cert
Variable
variables
Invoke-LabCommand	# 174:        Invoke-LabCommand -ActivityName
ActivityName
ComputerName
ComputerName
ScriptBlock
variables
variables
AsPlainText
Force
Sync-Parameter
Command
Name
Add-Certificate2
ALBoundParameters
Add
tempFile
ALBoundParameters
Remove
Add-Certificate2
ALBoundParameters
Path
tempFile
Variable
variables
functions
PassThru
Write-LogFunctionExit
Install-LabCAMachine	# 196:function Install-LabCAMachine
CmdletBinding
Parameter
Mandatory
AutomatedLab
Machine
Machine
PreDelaySeconds
PassThru
Write-LogFunctionEntry	# 210:    Write-LogFunctionEntry
Message
Message
machine
name
Message
role
machine
Roles
Name
AutomatedLab
Roles
CaRoot
Name
AutomatedLab
Roles
CaSubordinate
ordered
machine		# 221:    if ($machine.IsDomainJoined)
IsDomainJoined
domain
lab
Domains
Name
machine
DomainName
Add
domain
Name
domain
Administrator
UserName
Add
domain
Administrator
Password
rootDc
Get-LabMachine
Role
RootDC
DomainName
machine
DomainName
rootDc
rootDomain
Get-Lab
Domains
Name
rootDc
DomainName
rootDomainNetBIOSName
rootDomain
Name
rootDomain
lab
GetParentDomain
machine
DomainName
rootDomainNetBIOSName
rootDomain
Name
rootDc
Get-LabMachine
Role
RootDC
DomainName
rootDomain
Add		# 241:        $param.Add('ForestAdminUserName',
rootDomainNetBIOSName
rootDomain
Administrator
UserName
Add
rootDomain
Administrator
Password
Message
machine
name
Message
machine
DomainName
Message
username
Message
Password
Message
ForestAdminUserName
Message
ForestAdminPassword
Add
machine
Name
machine
InstallationUser
UserName
Add
machine
InstallationUser
Password
Add
Machine
Name
caDNSName	# 262:    $caDNSName = $Machine.Name
Machine
Name
Machine
DomainName
caDNSName
Machine
DomainName
Machine
DomainName
Add
Machine
DomainName
Add
role		# 275:    if ($role.Name -eq
Name
role
Properties
ContainsKey
Add
Add
role
Properties
ParentCA
role
Properties
ContainsKey
Add
Add
role
Properties
ParentCALogicalName
role		# 285    if (!($role.Properties.ContainsKey('CPSURL'))) {
Properties
ContainsKey
Add
caDNSName
Add
role
Properties
CPSURL
role
Properties
ContainsKey
Add
Add
role
Properties
CPSText
role
Properties
ContainsKey
Add
Add
role
Properties
InstallOCSP
role
Properties
ContainsKey
Add
Add
role
Properties
OCSPHTTPURL01
role
Properties
ContainsKey
Add
Add
role
Properties
OCSPHTTPURL02
role
Properties
ContainsKey
Add
Add
role
Properties
DoNotLoadDefaultTemplates
knownParameters	# 302:    $knownParameters = @()
knownParameters
knownParameters
knownParameters
knownParameters
knownParameters
knownParameters
unkownParFound
keySet
role
Properties
GetEnumerator
keySet
Key
cnotin
knownParameters
Message
keySet
Key
unkownParFound
unkownParFound	# 319:    if ($unkownParFound)
Message
name
knownParameters
GetEnumerator
Message
name
Message
Message		# 334:    Write-Debug -Message
Message
machine
name
Message
machine
Roles
Properties
GetEnumerator
Count
r
machine
Roles
AutomatedLab
Roles
r
Name
roles
key
r
Properties
GetEnumerator
Property
Key
Message
key
Key
PadRight
key
Value
message
Message
role
Properties
ContainsKey
CACommonName
Length
Message
CACommonName
role
Properties
ContainsKey
CACommonName
Length
Message
CACommonName
role		# 369:    if ($role.Name -eq 'CaRoot')
Name
CAType
Message
role		# 377:    if ($role.Name -eq 'CaSubordinate')
Name
CAType
Message
availableCombinations
availableCombinations
CryptoProviderName
HashAlgorithmName
KeyLength
combination	# 389:    $combination = $availableCombinations
availableCombinations
CryptoProviderName
CryptoProviderName
CryptoProviderName
combination
CryptoProviderName
Message
CryptoProviderName
availableCombinations
CryptoProviderName
HashAlgorithmName
combination
HashAlgorithmName
Message
HashAlgorithmName
CryptoProviderName
combination
HashAlgorithmName
KeyLength
combination
KeyLength
Message
KeyLength
CryptoProviderName
combination
KeyLength
role
Properties
ContainsKey
DatabaseDirectory
Message
ValidityPeriodUnits
ValidityPeriod
validityPeriodUnitsHours
ValidityPeriodUnits
validityPeriodUnitsHours
ValidityPeriodUnits
validityPeriodUnitsHours
ValidityPeriodUnits
validityPeriodUnitsHours
ValidityPeriodUnits
validityPeriodUnitsHours
ValidityPeriodUnits
CertsValidityPeriodUnits
CertsValidityPeriod
certsvalidityPeriodUnitsHours
CertsValidityPeriodUnits
certsvalidityPeriodUnitsHours
CertsValidityPeriodUnits
certsvalidityPeriodUnitsHours
CertsValidityPeriodUnits
certsvalidityPeriodUnitsHours
CertsValidityPeriodUnits
certsvalidityPeriodUnitsHours
CertsValidityPeriodUnits
CRLPeriodUnits	# 436:    if ($param.CRLPeriodUnits -ne '<auto>')
CRLPeriod
cRLPeriodUnitsHours
CRLPeriodUnits
cRLPeriodUnitsHours
CRLPeriodUnit
cRLPeriodUnitsHours
CRLPeriodUnits
cRLPeriodUnitsHours
CRLPeriodUnits
cRLPeriodUnitsHours
CRLPeriodUnits
CRLDeltaPeriodUnits	# 447:    if ($param.CRLDeltaPeriodUnits -ne '<auto>')
CRLDeltaPeriod
cRLDeltaPeriodUnitsHours
CRLDeltaPeriodUnits
cRLDeltaPeriodUnitsHours
CRLDeltaPeriodUnits
cRLDeltaPeriodUnitsHours
CRLDeltaPeriodUnits
cRLDeltaPeriodUnitsHours
CRLDeltaPeriodUnits
cRLDeltaPeriodUnitsHours
CRLDeltaPeriodUnits
CRLOverlapUnits	# 458:    if ($param.CRLOverlapUnits -ne '<auto>')
CRLOverlapPeriod
CRLOverlapUnitsHours
CRLOverlapUnits
CRLOverlapUnitsHours
CRLOverlapUnits
CRLOverlapUnitsHours
CRLOverlapUnits
CRLOverlapUnitsHours
CRLOverlapUnits
CRLOverlapUnitsHours
CRLOverlapUnits
:OuterLoop
OuterLoop
