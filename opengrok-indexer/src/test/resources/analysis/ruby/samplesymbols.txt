Board		# 4:class Board
clr
x
y
y
x
colorstr
id
s
id
s
put
x
y
col
str
x
y
colorstr
str
@hi
@mc
@total
x
y
private		# 19:private :clr
:clr
:pos
:colorstr
:put
CHR
COL
initialize	# 22:def initialize
h
w
m
@hi
h
@wi
w
@m
m
reset
reset		# 27:def reset
@cx
@cy
@mc
@m
@over
@data
@hi
@wi
@state
@hi
@wi
@total
@hi
@wi
@total
i
@data
i
@m
j
@total
@data
j
@data
j
clr
@hi
y
y
colorstr
COL
CHR
@wi
@cx
@cy
mark		# 49:def mark
@state
@wi
@cy
@cx
@state
@wi
@cy
@cx
@mc
@mc
@total
@total
put
@cx
@cy
COL
CHR
x
@cx		# 57:def open(x=@cx
y
@cy
@state
@wi
y
x
@state
@wi
y
x
@total
@total
@state
@wi
y
x
@mc
@mc
@state
@wi
y
x
fetch
x
y
@over
c
x
y
put
x
y
COL
CHR
c
c
x
y
x
y
y
x
y
x
@wi
y
x
y
x
x
y
x
@wi
x
y
x
y
@hi
x
y
y
@hi
x
y
x
@wi
y
@hi
x
y
@cx
@cy
fetch		# 78:def fetch(
x
y
x
x
@wi
y
y
@hi
@data
y
@wi
x
x
y
fetch		# 90:  fetch
x
y
fetch
x
y
fetch
x
y
fetch
x
y
fetch
x
y
fetch
x
y
fetch
x
y
fetch
x
y
over		# 94:def over(
win
quit
win
@cx
@cy
CHR
@hi
win
over?		# 105:def over?
remain
@mc
@total
@over
remain
over
remain
quit		# 116:def quit
@hi
y
y
@wi
x
colorstr
@state
y
@wi
x
COL
COL
fetch
x
y
CHR
CHR
x
y
down		# 127:def down
@cy
@hi
@cy
@cy
@cx
@cy
up		# 131:def up
@cy
@cy
@cy
@cx
@cy
left		# 135:def left
@cx
@cx
@cx
@cx
@cy
right		# 139:def right
@cx
@wi
@cx
@cx
@cx
@cy
bd		# 145:bd=Board
Board
STDIN
bd
reset
bd
mark
bd
down
bd
up
bd
left
bd
right
bd
bd
quit
bd		# 168:    if bd.over?
over?
STDIN
bd
reset
log_lines	# 177:puts "Last #{log_lines} lines from #{logfn}:"
logfn
